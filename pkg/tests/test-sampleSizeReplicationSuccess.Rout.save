
R version 3.6.3 (2020-02-29) -- "Holding the Windsock"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(ReplicationSuccess)
> 
> ## Functions to check for errors and (approximate) numerical equality
> ## ------------------------------------------------------------------
> checkError <- function(expr) {
+   inherits(try(expr = expr, silent = TRUE), "try-error")
+ }
> 
> checkNum <- function(x, y) {
+   stopifnot(isTRUE(all.equal.numeric(x, y)))
+ }
> 
> checkNumTol <- function(x, y, tol = .Machine$double.eps) {
+   stopifnot(isTRUE(all.equal.numeric(x, y, 
+                                      tolerance = tol,
+                                      check.attributes = FALSE)))
+ }
> 
> ## Check that wrong inputs throw errors
> ## ------------------------------------------------------------------
> checkError(sampleSizeReplicationSuccess(zo = 1, power = 0.8, 
+                                         designPrior = "wrong"))
[1] TRUE
> checkError(sampleSizeReplicationSuccess(zo = 1, power = -1))
[1] TRUE
> checkError(sampleSizeReplicationSuccess(zo = 1, power = 2))
[1] TRUE
> checkError(sampleSizeReplicationSuccess(zo = 1, power = 0.8, level = -1))
[1] TRUE
> checkError(sampleSizeReplicationSuccess(zo = 1, power = 0.8, level = 2))
[1] TRUE
> checkError(sampleSizeReplicationSuccess(zo = 1, power = 0.8, 
+                                         alternative = "wrong"))
[1] TRUE
> 
> ## Check numerically some results 
> ## ------------------------------------------------------------------
> za <- qnorm(p = 0.001/2, lower.tail = FALSE)
> checkNumTol(sampleSizeReplicationSuccess(zo = za, designPrior = "conditional",
+                                          power = 0.8, level = 0.05,
+                                          alternative = "two.sided",
+                                          type = "nominal"),
+             1, tol = 0.01)
> 
> ## Apply over a grid of values
> ## ------------------------------------------------------------------
> zo <- seq(-4, 4, 2)
> apply_grid <- expand.grid(priors = c("conditional", "predictive"),
+                           alt = c("one.sided", "two.sided"),
+                           stringsAsFactors = FALSE)
> for (i in seq(1, nrow(apply_grid))) {
+   print(apply_grid[i,])
+   c <- sampleSizeReplicationSuccess(zo = zo, 
+                                     power = 0.8, 
+                                     level = 0.05,
+                                     designPrior = apply_grid$priors[i],
+                                     alternative = apply_grid$alt[i],
+                                     type = "nominal")
+   print(round(c, digits = 5))
+ }
       priors       alt
1 conditional one.sided
[1]     Inf     Inf     Inf     Inf 0.40743
      priors       alt
2 predictive one.sided
[1]     Inf     Inf     Inf     Inf 0.46974
       priors       alt
3 conditional two.sided
[1] 0.54941     Inf     Inf     Inf 0.54941
      priors       alt
4 predictive two.sided
[1] 0.65425     Inf     Inf     Inf 0.65425
> 
> proc.time()
   user  system elapsed 
  0.218   0.166   0.176 
