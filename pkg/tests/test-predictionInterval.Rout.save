
R version 3.6.3 (2020-02-29) -- "Holding the Windsock"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(ReplicationSuccess)
> 
> ## Functions to check for errors and (approximate) numerical equality
> ## ------------------------------------------------------------------
> checkError <- function(expr) {
+   inherits(try(expr = expr, silent = TRUE), "try-error")
+ }
> 
> checkNum <- function(x, y) {
+   stopifnot(isTRUE(all.equal.numeric(x, y)))
+ }
> 
> checkNumTol <- function(x, y, tol = .Machine$double.eps) {
+   stopifnot(isTRUE(all.equal.numeric(x, y, 
+                                      tolerance = tol,
+                                      check.attributes = FALSE)))
+ }
> 
> ## Check that wrong inputs throw errors
> ## ------------------------------------------------------------------
> checkError(predictionInterval(zo = 1, c = 1, designPrior = "wrong"))
[1] TRUE
> checkError(predictionInterval(zo = 1, c = -1))
[1] TRUE
> checkError(predictionInterval(zo = 1, c = 1, d = -1))
[1] TRUE
> checkError(predictionInterval(zo = 1, c = 1, conf.level = -1))
[1] TRUE
> checkError(predictionInterval(zo = 1, c = 1, conf.level = 2))
[1] TRUE
> 
> ## Check numerically some results 
> ## ------------------------------------------------------------------
> za <- qnorm(p = 0.025, lower.tail = FALSE)
> checkNumTol(predictionInterval(zo = za, designPrior = "conditional"),
+             data.frame(lower = 0, mean = za, upper = 2*za))
> 
> ## Apply over a grid of values
> ## ------------------------------------------------------------------
> zo <- seq(-2, 2, 2)
> apply_grid <- expand.grid(priors = c("conditional", "predictive", "EB"),
+                           d = c(0, 0.5),
+                           c = c(0.5, 2),
+                           stringsAsFactors = FALSE)
> for (i in seq(1, nrow(apply_grid))) {
+   print(apply_grid[i,])
+   pis <- predictionInterval(zo = zo,
+                             c = apply_grid$c[i],
+                             designPrior = apply_grid$priors[i],
+                             d = apply_grid$d[i])
+   print(round(pis, digits = 5))
+ }
       priors d   c
1 conditional 0 0.5
     lower     mean   upper
1 -3.37418 -1.41421 0.54575
2 -1.95996  0.00000 1.95996
3 -0.54575  1.41421 3.37418
      priors d   c
2 predictive 0 0.5
     lower     mean   upper
1 -3.81467 -1.41421 0.98624
2 -2.40046  0.00000 2.40046
3 -0.98624  1.41421 3.81467
  priors d   c
3     EB 0 0.5
     lower     mean   upper
1 -3.35892 -1.06066 1.23760
2 -1.95996  0.00000 1.95996
3 -1.23760  1.06066 3.35892
       priors   d   c
4 conditional 0.5 0.5
     lower     mean   upper
1 -3.37418 -1.41421 0.54575
2 -1.95996  0.00000 1.95996
3 -0.54575  1.41421 3.37418
      priors   d   c
5 predictive 0.5 0.5
     lower     mean   upper
1 -4.18602 -1.41421 1.35759
2 -2.77181  0.00000 2.77181
3 -1.35759  1.41421 4.18602
  priors   d   c
6     EB 0.5 0.5
     lower     mean   upper
1 -3.45342 -0.88388 1.68565
2 -2.19131  0.00000 2.19131
3 -1.68565  0.88388 3.45342
       priors d c
7 conditional 0 2
     lower     mean    upper
1 -4.78839 -2.82843 -0.86846
2 -1.95996  0.00000  1.95996
3  0.86846  2.82843  4.78839
      priors d c
8 predictive 0 2
     lower     mean   upper
1 -6.22318 -2.82843 0.56633
2 -3.39476  0.00000 3.39476
3 -0.56633  2.82843 6.22318
  priors d c
9     EB 0 2
     lower     mean   upper
1 -5.22030 -2.12132 0.97765
2 -1.95996  0.00000 1.95996
3 -0.97765  2.12132 5.22030
        priors   d c
10 conditional 0.5 2
     lower     mean    upper
1 -4.78839 -2.82843 -0.86846
2 -1.95996  0.00000  1.95996
3  0.86846  2.82843  4.78839
       priors   d c
11 predictive 0.5 2
     lower     mean   upper
1 -7.21104 -2.82843 1.55419
2 -4.38261  0.00000 4.38261
3 -1.55419  2.82843 7.21104
   priors   d c
12     EB 0.5 2
     lower     mean   upper
1 -5.62596 -1.76777 2.09043
2 -2.77181  0.00000 2.77181
3 -2.09043  1.76777 5.62596
> 
> proc.time()
   user  system elapsed 
  0.205   0.172   0.163 
