
R version 4.0.0 (2020-04-24) -- "Arbor Day"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(ReplicationSuccess)
> 
> ## Functions to check for errors and (approximate) numerical equality
> ## ------------------------------------------------------------------
> checkError <- function(expr) {
+   inherits(try(expr = expr, silent = TRUE), "try-error")
+ }
> 
> checkNum <- function(x, y) {
+   stopifnot(isTRUE(all.equal.numeric(x, y)))
+ }
> 
> checkNumTol <- function(x, y, tol = .Machine$double.eps) {
+   stopifnot(isTRUE(all.equal.numeric(x, y, 
+                                      tolerance = tol,
+                                      check.attributes = FALSE)))
+ }
> 
> ## Check that wrong inputs throw errors
> ## ------------------------------------------------------------------
> checkError(predictionInterval(thetao = "wrong", seo = -1, ser = 1))
[1] TRUE
> checkError(predictionInterval(thetao = 1, seo = 1, ser = 1, designPrior = "wrong"))
[1] TRUE
> checkError(predictionInterval(thetao = 1, seo = -1, ser = 1))
[1] TRUE
> checkError(predictionInterval(thetao = 1, seo = 1, ser = -1))
[1] TRUE
> checkError(predictionInterval(thetao = 1, seo = 1, ser = 1, tau = -1))
[1] TRUE
> checkError(predictionInterval(thetao = 1, seo = 1, ser = 1, conf.level = -1))
[1] TRUE
> checkError(predictionInterval(thetao = 1, seo = 1, ser = 1, conf.level = 2))
[1] TRUE
> 
> ## Check numerically some results 
> ## ------------------------------------------------------------------
> za <- qnorm(p = 0.025, lower.tail = FALSE)
> checkNumTol(predictionInterval(thetao = za, seo = 1, ser = 1, 
+                                designPrior = "conditional"),
+             data.frame(lower = 0, mean = za, upper = 2*za))
> 
> ## Apply over a grid of values
> ## ------------------------------------------------------------------
> thetao <- seq(-2, 2, 2)
> apply_grid <- expand.grid(priors = c("conditional", "predictive", "EB"),
+                           tau = c(0, 0.5),
+                           seo = 1,
+                           ser = c(0.5, 2),
+                           stringsAsFactors = FALSE)
> for (i in seq(1, nrow(apply_grid))) {
+   print(apply_grid[i,])
+   pis <- predictionInterval(thetao = thetao,
+                             seo = apply_grid$seo[i],
+                             ser = apply_grid$ser[i],
+                             tau = apply_grid$tau[i],
+                             designPrior = apply_grid$priors[i])
+   print(round(pis, digits = 5))
+ }
       priors tau seo ser
1 conditional   0   1 0.5
     lower mean    upper
1 -2.97998   -2 -1.02002
2 -0.97998    0  0.97998
3  1.02002    2  2.97998
      priors tau seo ser
2 predictive   0   1 0.5
     lower mean   upper
1 -4.19131   -2 0.19131
2 -2.19131    0 2.19131
3 -0.19131    2 4.19131
  priors tau seo ser
3     EB   0   1 0.5
     lower mean   upper
1 -3.45996 -1.5 0.45996
2 -0.97998  0.0 0.97998
3 -0.45996  1.5 3.45996
       priors tau seo ser
4 conditional 0.5   1 0.5
     lower mean    upper
1 -2.97998   -2 -1.02002
2 -0.97998    0  0.97998
3  1.02002    2  2.97998
      priors tau seo ser
5 predictive 0.5   1 0.5
     lower mean   upper
1 -4.59279   -2 0.59279
2 -2.59279    0 2.59279
3 -0.59279    2 4.59279
  priors tau seo ser
6     EB 0.5   1 0.5
     lower   mean   upper
1 -3.66017 -1.375 0.91017
2 -1.38590  0.000 1.38590
3 -0.91017  1.375 3.66017
       priors tau seo ser
7 conditional   0   1   2
     lower mean   upper
1 -5.91993   -2 1.91993
2 -3.91993    0 3.91993
3 -1.91993    2 5.91993
      priors tau seo ser
8 predictive   0   1   2
     lower mean   upper
1 -6.38261   -2 2.38261
2 -4.38261    0 4.38261
3 -2.38261    2 6.38261
  priors tau seo ser
9     EB   0   1   2
     lower mean   upper
1 -5.77164 -1.5 2.77164
2 -3.91993  0.0 3.91993
3 -2.77164  1.5 5.77164
        priors tau seo ser
10 conditional 0.5   1   2
     lower mean   upper
1 -5.91993   -2 1.91993
2 -3.91993    0 3.91993
3 -1.91993    2 5.91993
       priors tau seo ser
11 predictive 0.5   1   2
     lower mean   upper
1 -6.59652   -2 2.59652
2 -4.59652    0 4.59652
3 -2.59652    2 6.59652
   priors tau seo ser
12     EB 0.5   1   2
     lower   mean   upper
1 -5.80529 -1.375 3.05529
2 -4.04057  0.000 4.04057
3 -3.05529  1.375 5.80529
> 
> proc.time()
   user  system elapsed 
  0.184   0.000   0.178 
