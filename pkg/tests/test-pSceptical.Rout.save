
R version 3.6.3 (2020-02-29) -- "Holding the Windsock"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(ReplicationSuccess)
> 
> ## Functions to check for errors and (approximate) numerical equality
> ## ------------------------------------------------------------------
> checkError <- function(expr) {
+   inherits(try(expr = expr, silent = TRUE), "try-error")
+ }
> 
> checkNum <- function(x, y) {
+   stopifnot(isTRUE(all.equal.numeric(x, y)))
+ }
> 
> checkNumTol <- function(x, y, tol = .Machine$double.eps) {
+   stopifnot(isTRUE(all.equal.numeric(x, y, 
+                                      tolerance = tol,
+                                      check.attributes = FALSE)))
+ }
> 
> ## Check that wrong inputs throw errors
> ## ------------------------------------------------------------------
> checkError(pSceptical(zo = 1, zr = 1, c = 1, alternative = "wrong"))
[1] TRUE
> checkError(pSceptical(zo = 1, zr = 1, c = -1))
[1] TRUE
> checkError(pSceptical(zo = 1, zr = 1, alternative = "wrong"))
[1] TRUE
> 
> 
> ## Check numerically some results from the paper
> ## ------------------------------------------------------------------
> checkNumTol(pSceptical(zo = sqrt(12.19), zr = sqrt(3.99), c = 1, 
+                        alternative = "two.sided", type = "nominal"),
+             0.083, tol = 0.01)
> checkNumTol(pSceptical(zo = 2.33, zr = 2.33, c = 1, alternative = "one.sided",
+                        type = "nominal"),
+             0.05, tol = 0.01)
> 
> 
> ## Apply over a grid of values
> ## ------------------------------------------------------------------
> zo <- seq(-4, 4, 2)
> apply_grid <- expand.grid(zr = seq(-4, 4, 2),
+                           c = c(0.5, 2),
+                           alt = c("one.sided", "two.sided"),
+                           stringsAsFactors = FALSE)
> for (i in seq(1, nrow(apply_grid))) {
+   print(apply_grid[i,])
+   c <- pSceptical(zo = zo, 
+                   zr = apply_grid$zr[i], 
+                   c = 0.05,
+                   alternative = apply_grid$alt[i],
+                   type = "nominal")
+   print(round(c, digits = 5))
+ }
  zr   c       alt
1 -4 0.5 one.sided
[1] 0.00015 0.02363 0.50000 0.97637 0.99985
  zr   c       alt
2 -2 0.5 one.sided
[1] 0.02363 0.03530 0.50000 0.96470 0.97637
  zr   c       alt
3  0 0.5 one.sided
[1] 0.5 0.5 0.5 0.5 0.5
  zr   c       alt
4  2 0.5 one.sided
[1] 0.97637 0.96470 0.50000 0.03530 0.02363
  zr   c       alt
5  4 0.5 one.sided
[1] 0.99985 0.97637 0.50000 0.02363 0.00015
  zr c       alt
6 -4 2 one.sided
[1] 0.00015 0.02363 0.50000 0.97637 0.99985
  zr c       alt
7 -2 2 one.sided
[1] 0.02363 0.03530 0.50000 0.96470 0.97637
  zr c       alt
8  0 2 one.sided
[1] 0.5 0.5 0.5 0.5 0.5
  zr c       alt
9  2 2 one.sided
[1] 0.97637 0.96470 0.50000 0.03530 0.02363
   zr c       alt
10  4 2 one.sided
[1] 0.99985 0.97637 0.50000 0.02363 0.00015
   zr   c       alt
11 -4 0.5 two.sided
[1] 0.00030 0.04727 1.00000 0.04727 0.00030
   zr   c       alt
12 -2 0.5 two.sided
[1] 0.04727 0.07060 1.00000 0.07060 0.04727
   zr   c       alt
13  0 0.5 two.sided
[1] 1 1 1 1 1
   zr   c       alt
14  2 0.5 two.sided
[1] 0.04727 0.07060 1.00000 0.07060 0.04727
   zr   c       alt
15  4 0.5 two.sided
[1] 0.00030 0.04727 1.00000 0.04727 0.00030
   zr c       alt
16 -4 2 two.sided
[1] 0.00030 0.04727 1.00000 0.04727 0.00030
   zr c       alt
17 -2 2 two.sided
[1] 0.04727 0.07060 1.00000 0.07060 0.04727
   zr c       alt
18  0 2 two.sided
[1] 1 1 1 1 1
   zr c       alt
19  2 2 two.sided
[1] 0.04727 0.07060 1.00000 0.07060 0.04727
   zr c       alt
20  4 2 two.sided
[1] 0.00030 0.04727 1.00000 0.04727 0.00030
> 
> proc.time()
   user  system elapsed 
  0.194   0.186   0.161 
